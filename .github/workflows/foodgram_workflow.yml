name: Foodgram workflow
on: [ push ]
jobs:

  backend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          pip install -r backend/requirements.txt
      - name: Testing
        run: |
          flake8

  build_and_push_backend_to_docker_hub:
    if: ${{ github.ref_name == 'master' }}
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: backend
          push: true
          tags: kraleksey/foodgram_backend:latest

  build_and_push_frontend_to_docker_hub:
    if: ${{ github.ref_name == 'master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: frontend
          push: true
          tags: kraleksey/foodgram_frontend:latest

  deploy:
    if: ${{ github.ref_name == 'master' }}
    runs-on: ubuntu-latest
    needs:
      - build_and_push_frontend_to_docker_hub
      - build_and_push_backend_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web -f
            rm .env -f
            touch .env
            echo DEBUG=False >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DB_ENGINE=${{ variables.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ variables.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ variables.DB_HOST }} >> .env
            echo DB_PORT=${{ variables.DB_PORT }} >> .env
            sudo docker-compose pull
            sudo docker-compose up -d
            sudo docker image prune -f

  send_message:
    if: ${{ always() }}
    needs: [ backend_tests, build_and_push_backend_to_docker_hub, build_and_push_frontend_to_docker_hub, deploy ]
    runs-on: ubuntu-latest
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.workflow }}
            Actor: ${{ github.actor }}
            Branch: ${{ github.ref_name }}
            Results:
              testing: ${{ needs.backend_tests.result }}
              building and pushing back: ${{ needs.build_and_push_backend_to_docker_hub.result }}
              building and pushing front: ${{ needs.build_and_push_frontend_to_docker_hub.result }}
              deploy: ${{ needs.deploy.result }}
